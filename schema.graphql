union Node = Task | Folder

scalar PosixTime 

type Task {
  id : ID!
  name : String!
  due : PosixTime
  parent : ID!
  duration : Float!
  doneOn : PosixTime
}

type Folder {
  id : ID!
  parent : ID!
  name : String!
}

type Me {
 nodes : [Node!]!
 subscription : Boolean!
}

type Query {
  me : Me!
}

enum PatchCommandType {
  DELETE
  UPDATE
}

type Mutation {
 patchNodes (args: [PatchCommand!]!) : OkResult!
 deleteUser : OkResult!
 requestSubscriptionSession : String!
}

input PatchCommand {
  type : PatchCommandType!
  id : ID
  folder : PatchFolder
  task : PatchTask
}

input PatchTask {
  parent : ID!
  name : String!
  id : ID!
  duration : Float!
  due : PosixTime
  doneOn : PosixTime
}

input PatchFolder {
  parent : ID!
  name : String!
  id : ID!
}

type OkResult {
  ok : Boolean!
}
